// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "shared.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Enums_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Enums_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTFloat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PkgFlag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_shared_2eproto() {
  protobuf_AddDesc_shared_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "shared.proto");
  GOOGLE_CHECK(file != NULL);
  Enums_descriptor_ = file->message_type(0);
  static const int Enums_offsets_[1] = {
  };
  Enums_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Enums_descriptor_,
      Enums::default_instance_,
      Enums_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enums, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enums, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Enums));
  TFloat_descriptor_ = file->message_type(1);
  static const int TFloat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFloat, v_),
  };
  TFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFloat_descriptor_,
      TFloat::default_instance_,
      TFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFloat));
  TTFloat_descriptor_ = file->message_type(2);
  static const int TTFloat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTFloat, v_),
  };
  TTFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTFloat_descriptor_,
      TTFloat::default_instance_,
      TTFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTFloat));
  PkgFlag_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_shared_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Enums_descriptor_, &Enums::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFloat_descriptor_, &TFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTFloat_descriptor_, &TTFloat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_shared_2eproto() {
  delete Enums::default_instance_;
  delete Enums_reflection_;
  delete TFloat::default_instance_;
  delete TFloat_reflection_;
  delete TTFloat::default_instance_;
  delete TTFloat_reflection_;
}

void protobuf_AddDesc_shared_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014shared.proto\"\007\n\005Enums\"\023\n\006TFloat\022\t\n\001v\030\001"
    " \002(\005\"\024\n\007TTFloat\022\t\n\001v\030\001 \002(\005*+\n\007PkgFlag\022\020\n"
    "\014PKG_COMPRESS\020\000\022\016\n\nPKG_CRYPTO\020\001", 111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "shared.proto", &protobuf_RegisterTypes);
  Enums::default_instance_ = new Enums();
  TFloat::default_instance_ = new TFloat();
  TTFloat::default_instance_ = new TTFloat();
  Enums::default_instance_->InitAsDefaultInstance();
  TFloat::default_instance_->InitAsDefaultInstance();
  TTFloat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_shared_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_shared_2eproto {
  StaticDescriptorInitializer_shared_2eproto() {
    protobuf_AddDesc_shared_2eproto();
  }
} static_descriptor_initializer_shared_2eproto_;
const ::google::protobuf::EnumDescriptor* PkgFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkgFlag_descriptor_;
}
bool PkgFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Enums::Enums()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Enums::InitAsDefaultInstance() {
}

Enums::Enums(const Enums& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Enums::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Enums::~Enums() {
  SharedDtor();
}

void Enums::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Enums::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Enums::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Enums_descriptor_;
}

const Enums& Enums::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

Enums* Enums::default_instance_ = NULL;

Enums* Enums::New() const {
  return new Enums;
}

void Enums::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Enums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Enums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Enums::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Enums::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Enums::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Enums* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Enums*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Enums::MergeFrom(const Enums& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Enums::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enums::CopyFrom(const Enums& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enums::IsInitialized() const {

  return true;
}

void Enums::Swap(Enums* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Enums::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Enums_descriptor_;
  metadata.reflection = Enums_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFloat::kVFieldNumber;
#endif  // !_MSC_VER

TFloat::TFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TFloat::InitAsDefaultInstance() {
}

TFloat::TFloat(const TFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TFloat::SharedCtor() {
  _cached_size_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFloat::~TFloat() {
  SharedDtor();
}

void TFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFloat_descriptor_;
}

const TFloat& TFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

TFloat* TFloat::default_instance_ = NULL;

TFloat* TFloat::New() const {
  return new TFloat;
}

void TFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 v = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 v = 1;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 v = 1;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 v = 1;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFloat::MergeFrom(const TFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFloat::CopyFrom(const TFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TFloat::Swap(TFloat* other) {
  if (other != this) {
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFloat_descriptor_;
  metadata.reflection = TFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTFloat::kVFieldNumber;
#endif  // !_MSC_VER

TTFloat::TTFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TTFloat::InitAsDefaultInstance() {
}

TTFloat::TTFloat(const TTFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TTFloat::SharedCtor() {
  _cached_size_ = 0;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTFloat::~TTFloat() {
  SharedDtor();
}

void TTFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTFloat_descriptor_;
}

const TTFloat& TTFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_shared_2eproto();
  return *default_instance_;
}

TTFloat* TTFloat::default_instance_ = NULL;

TTFloat* TTFloat::New() const {
  return new TTFloat;
}

void TTFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 v = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TTFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 v = 1;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TTFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 v = 1;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TTFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 v = 1;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTFloat::MergeFrom(const TTFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTFloat::CopyFrom(const TTFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TTFloat::Swap(TTFloat* other) {
  if (other != this) {
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTFloat_descriptor_;
  metadata.reflection = TTFloat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
